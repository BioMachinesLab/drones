--environment classname=environment.BoundaryEnvironment,
	width=100,
	height=100,
	wallsdistance=50,
	distance=60,
	safetydistance=5,
	random=0.3,
	steps=2000,
	placeoutside=1
--postevaluation samples=100
--executor classname=taskexecutor.ConillonTaskExecutor
--evaluation classname=evaluation.CoverageFitnessTest,
	distance=5,
	kill=1,
	resolution=5,
	safetydistance=3
--controllers classname=controllers.DroneNeuralNetworkController,
	network=(
		classname=commoninterface.neuralnetwork.CINEATNetwork,
		inputs=(
			GeoFence=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				id=1
			),
			InsideBoundary=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				id=2
			),
			Drone=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				id=3
			)
		),
		outputs=(
			Rudder=(
				classname=commoninterface.neuralnetwork.outputs.RudderCINNOutput,
				forwardonly=1,
				id=1
			)
		)
	)
--simulator network=(
		classname=network.SimulationNetwork
	)
--evolution classname=evolutionaryrobotics.evolution.NEATEvolution
--robots sensors=(
		CISensorWrapper_1=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.GeoFenceCISensor,
				id=1,
				range=20,
				numbersensors=4
			),
			id=1
		),
		CISensorWrapper_2=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.InsideBoundaryCISensor,
				id=2
			),
			id=2
		),
		CISensorWrapper_3=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.DroneCISensor,
				id=3,
				range=20,
				numbersensors=4
			),
			id=3
		)
	),
	classname=simulation.robot.AquaticDrone,
	rudder=1,
	distancewheels=0.2,
	variablenumber=1,
	randomizenumber=(
		5,
		6,
		7,
		8,
		9,
		10
	),
	numberofrobots=10,
	radius=0.5,
	diameter=1,
	maxspeed=0.3,
	commrange=40,
	gpserror=1.8,
	compassoffset=0,
	compasserror=10,
	headingoffset=0.05,
	speedoffset=0.1,
	avoiddrones=0
--updatables currentsz=(
		classname=updatables.WaterCurrent,
		maxspeed=0.1
	)
--population classname=evolutionaryrobotics.populations.NEATPopulation,
	samples=10,
	generations=100,
	size=150